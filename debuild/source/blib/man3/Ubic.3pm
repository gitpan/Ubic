.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Ubic 3"
.TH Ubic 3 "2011-06-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Ubic \- flexible perl\-based service manager
.SH "VERSION"
.IX Header "VERSION"
version 1.29
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    Ubic\->start("my\-service");
.Ve
.PP
.Vb 1
\&    Ubic\->stop("my\-service");
.Ve
.PP
.Vb 1
\&    $status = Ubic\->status("my\-service");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is a singleton \s-1OOP\s0 class.
.PP
All of its methods can be invoked as class methods or object methods.
.SH "INTRODUCTION"
.IX Header "INTRODUCTION"
Ubic is a flexible perl-based service manager.
.PP
This module is a perl frontend to ubic services.
.PP
Further directions:
.PP
if you are looking for a general introduction to Ubic, see Ubic::Manual::Intro;
.PP
if you want to use ubic from command line, see ubic;
.PP
if you want to manage ubic services from perl scripts, read this \s-1POD\s0;
.PP
if you want to write your own service, see Ubic::Service and other \f(CW\*(C`Ubic::Service::*\*(C'\fR modules.
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "\fBUbic\->new({ ... })\fR" 4
.IX Item "Ubic->new({ ... })"
All methods in this package can be invoked as class methods, but sometimes you may need to override some status dirs. In this case you should construct your own \f(CW\*(C`Ubic\*(C'\fR instance.
.Sp
Note that you can't create several instances in one process and have them work independently. So, this constructor is actually just a weird way to override service_dir and data_dir.
.Sp
Constructor options (all of them are optional):
.RS 4
.IP "\fIservice_dir\fR" 4
.IX Item "service_dir"
Name of dir with service descriptions (which will be used to construct root \f(CW\*(C`Ubic::Multiservice::Dir\*(C'\fR object).
.IP "\fIdata_dir\fR" 4
.IX Item "data_dir"
Dir into which ubic stores all of its data (locks, status files, tmp files).
.RE
.RS 4
.RE
.SH "LSB METHODS"
.IX Header "LSB METHODS"
See \s-1LSB\s0 documentation for init-script method specifications.
.PP
Following functions are trying to conform, except that all dashes in method names are replaced with underscores.
.PP
Unlike \f(CW\*(C`Ubic::Service\*(C'\fR methods, these methods are guaranteed to return blessed versions of result, i.e. \f(CW\*(C`Ubic::Result::Class\*(C'\fR objects.
.IP "\fBstart($name)\fR" 4
.IX Item "start($name)"
Start service.
.IP "\fBstop($name)\fR" 4
.IX Item "stop($name)"
Stop service.
.IP "\fBrestart($name)\fR" 4
.IX Item "restart($name)"
Restart service; start it if it's not running.
.IP "\fBtry_restart($name)\fR" 4
.IX Item "try_restart($name)"
Restart service if it is enabled.
.IP "\fBreload($name)\fR" 4
.IX Item "reload($name)"
Reloads service if reloading is implemented; throw exception otherwise.
.IP "\fBforce_reload($name)\fR" 4
.IX Item "force_reload($name)"
Reloads service if reloading is implemented, otherwise restarts it.
.Sp
Does nothing if service is disabled.
.IP "\fBstatus($name)\fR" 4
.IX Item "status($name)"
Get service status.
.SH "OTHER METHODS"
.IX Header "OTHER METHODS"
.IP "\fBenable($name)\fR" 4
.IX Item "enable($name)"
Enable service.
.Sp
Enabled service means that service *should* be running. It will be checked by status and marked as broken if it's enabled but not running.
.IP "\fBis_enabled($name)\fR" 4
.IX Item "is_enabled($name)"
Returns true value if service is enabled, false otherwise.
.IP "\fBdisable($name)\fR" 4
.IX Item "disable($name)"
Disable service.
.Sp
Disabled service means that service is ignored by ubic. It's state will no longer be checked by watchdog, and pings will answer that service is not running, even if it's not true.
.IP "\fBcached_status($name)\fR" 4
.IX Item "cached_status($name)"
Get cached status of enabled service.
.Sp
Unlike other methods, it doesn't require user to be root.
.ie n .IP "\fBdo_custom_command($name, \fB$command\fB)\fR" 4
.el .IP "\fBdo_custom_command($name, \f(CB$command\fB)\fR" 4
.IX Item "do_custom_command($name, $command)"
Execute custom command \f(CW$command\fR for given service.
.IP "\fBservice($name)\fR" 4
.IX Item "service($name)"
Get service object by name.
.IP "\fBhas_service($name)\fR" 4
.IX Item "has_service($name)"
Check whether service \f(CW$name\fR exists.
.IP "\fB\f(BIservices()\fB\fR" 4
.IX Item "services()"
Get list of all services.
.IP "\fB\f(BIservice_names()\fB\fR" 4
.IX Item "service_names()"
Get list of names of all services.
.IP "\fB\f(BIroot_service()\fB\fR" 4
.IX Item "root_service()"
Get root service.
.Sp
Root service doesn't have a name and returns all top-level services with \f(CW\*(C`services()\*(C'\fR method. You can use it to traverse the whole service tree.
.IP "\fBcompl_services($line)\fR" 4
.IX Item "compl_services($line)"
Return list of autocompletion variants for given service prefix.
.ie n .IP "\fBset_cached_status($name, \fB$status\fB)\fR" 4
.el .IP "\fBset_cached_status($name, \f(CB$status\fB)\fR" 4
.IX Item "set_cached_status($name, $status)"
Write new status into service's status file.
.IP "\fB\f(BIget_data_dir()\fB\fR" 4
.IX Item "get_data_dir()"
Get data dir.
.IP "\fBset_data_dir($dir)\fR" 4
.IX Item "set_data_dir($dir)"
Set data dir, creating it if necessary.
.Sp
Data dir is a directory with service statuses and locks. (See \f(CW\*(C`Ubic::Settings\*(C'\fR for more details on how it's calculated).
.Sp
This setting will be propagated into subprocesses using environment, so following code works:
.Sp
.Vb 4
\&    Ubic\->set_data_dir(\(aqtfiles/ubic\(aq);
\&    Ubic\->set_service_dir(\(aqetc/ubic/service\(aq);
\&    system(\(aqubic start some_service\(aq);
\&    system(\(aqubic stop some_service\(aq);
.Ve
.IP "\fBset_ubic_dir($dir)\fR" 4
.IX Item "set_ubic_dir($dir)"
Deprecated. This method got renamed to \f(CW\*(C`set_data_dir()\*(C'\fR.
.IP "\fBset_default_user($user)\fR" 4
.IX Item "set_default_user($user)"
Set default user for all services.
.Sp
This is a simple proxy for \f(CW\*(C`Ubic::Settings\->default_user($user)\*(C'\fR.
.IP "\fB\f(BIget_service_dir()\fB\fR" 4
.IX Item "get_service_dir()"
Get ubic services dir.
.IP "\fBset_service_dir($dir)\fR" 4
.IX Item "set_service_dir($dir)"
Set ubic services dir.
.SH "INTERNAL METHODS"
.IX Header "INTERNAL METHODS"
You shouldn't call these from code which doesn't belong to core Ubic distribution
.PP
These methods can be changed or removed without further notice.
.IP "\fBstatus_file($name)\fR" 4
.IX Item "status_file($name)"
Get status file name by service's name.
.IP "\fBstatus_obj($name)\fR" 4
.IX Item "status_obj($name)"
Get status persistent object by service's name.
.Sp
It's a bad idea to call this from any other class than \f(CW\*(C`Ubic\*(C'\fR, but if you'll ever want to do this, at least don't forget to create \f(CW\*(C`Ubic::AccessGuard\*(C'\fR first.
.IP "\fBstatus_obj_ro($name)\fR" 4
.IX Item "status_obj_ro($name)"
Get readonly, nonlocked status persistent object by service's name.
.IP "\fBaccess_guard($name)\fR" 4
.IX Item "access_guard($name)"
Get access guard (Ubic::AccessGuard object) for given service.
.IP "\fBlock($name)\fR" 4
.IX Item "lock($name)"
Acquire lock object for given service.
.Sp
You can lock one object twice from the same process, but not from different processes.
.IP "\fBdo_sub($code)\fR" 4
.IX Item "do_sub($code)"
Run any code and wrap result into \f(CW\*(C`Ubic::Result::Class\*(C'\fR object.
.ie n .IP "\fBdo_cmd($name, \fB$cmd\fB)\fR" 4
.el .IP "\fBdo_cmd($name, \f(CB$cmd\fB)\fR" 4
.IX Item "do_cmd($name, $cmd)"
Run \f(CW$cmd\fR method from service \f(CW$name\fR and wrap any result or exception into \f(CW\*(C`Ubic::Result::Class\*(C'\fR object.
.IP "\fBforked_call($callback)\fR" 4
.IX Item "forked_call($callback)"
Run \f(CW$callback\fR inside fork and return its return value.
.Sp
Interaction happens through temporary file in \f(CW\*(C`$ubic\-\*(C'\fR{tmp_dir}> dir.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Most Ubic-related links are collected on github wiki: <http://github.com/berekuk/Ubic/wiki>.
.SH "SUPPORT"
.IX Header "SUPPORT"
Our mailing list is ubic\-perl@googlegroups.com. Send an empty message to ubic\-perl+subscribe@googlegroups.com to subscribe.
.PP
These is also an \s-1IRC\s0 channel: irc://irc.perl.org#ubic.
.SH "AUTHOR"
.IX Header "AUTHOR"
Vyacheslav Matyukhin <mmcleric@yandex\-team.ru>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by Yandex \s-1LLC\s0.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
