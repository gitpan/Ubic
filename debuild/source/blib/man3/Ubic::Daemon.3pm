.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Ubic::Daemon 3"
.TH Ubic::Daemon 3 "2011-06-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Ubic::Daemon \- toolkit for creating daemonized process
.SH "VERSION"
.IX Header "VERSION"
version 1.29
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Ubic::Daemon qw(start_daemon stop_daemon check_daemon);
.Ve
.PP
.Vb 2
\&    start_daemon({bin => \(aq/bin/sleep\(aq, pidfile => "/var/lib/something/pid"});
\&    stop_daemon("/var/lib/something/pid");
.Ve
.PP
.Vb 1
\&    $daemon_status = check_daemon("/var/lib/something/pid");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module can safely start and daemonize any binary or any perl coderef.
.PP
Main source of knowledge if daemon is still running is pidfile, which is locked all the time after daemon was created.
.PP
Pidfile format is unreliable and can change in future releases (it's actually even not a file, it's a dir with several files inside it),
so if you need to get daemon's pid, use \fIcheck_daemon()\fR result.
.IP "\fBstop_daemon($pidfile)\fR" 4
.IX Item "stop_daemon($pidfile)"
.PD 0
.ie n .IP "\fBstop_daemon($pidfile, \fB$options\fB)\fR" 4
.el .IP "\fBstop_daemon($pidfile, \f(CB$options\fB)\fR" 4
.IX Item "stop_daemon($pidfile, $options)"
.PD
Stop daemon which was started with \f(CW$pidfile\fR.
.Sp
It sends \fI\s-1SIGTERM\s0\fR to process with pid specified in \f(CW$pidfile\fR until it will stop to exist (according to \f(CW\*(C`check_daemon()\*(C'\fR method).
.Sp
If it fails to stop process after several seconds, exception will be raised (this should never happen, assuming you have enough grants).
.Sp
Options:
.RS 4
.IP "\fItimeout\fR" 4
.IX Item "timeout"
Number of seconds to wait before raising exception that daemon can't be stopped.
.RE
.RS 4
.Sp
Return value: \f(CW\*(C`not running\*(C'\fR if daemon is already not running; \f(CW\*(C`stopped\*(C'\fR if daemon is stopped by \fI\s-1SIGTERM\s0\fR.
.RE
.IP "\fBstart_daemon($params)\fR" 4
.IX Item "start_daemon($params)"
Start daemon.
.Sp
Throws exception if anything fails.
.Sp
Successful completion doesn't mean much, though, since daemon can fail any moment later, and we have no idea when its initialization stage finishes.
.Sp
Parameters:
.RS 4
.IP "\fIbin\fR" 4
.IX Item "bin"
Binary which will be daemonized.
.Sp
Can be string or arrayref with arguments. Arrayref-style values are recommended in complex cases, because otherwise \f(CW\*(C`exec()\*(C'\fR can invoke sh shell which will immediately exit on sigterm.
.IP "\fIfunction\fR" 4
.IX Item "function"
Function which will be daemonized. One and only one of \fIfunction\fR and \fIbin\fR must be specified.
.Sp
Function daemonization is a dangerous feature and will probably be deprecated and removed in future.
.IP "\fIname\fR" 4
.IX Item "name"
Name of guardian process. Guardian will be named \*(L"ubic\-guardian \f(CW$name\fR\*(R".
.Sp
If not specified, \fIbin\fR's value will be used, or \f(CW\*(C`anonymous\*(C'\fR when daemonizing perl code.
.IP "\fIpidfile\fR" 4
.IX Item "pidfile"
Pidfile is a dir in local filesystem which will be used as a storage of daemon's info.
.Sp
It will be created if necessary, assuming that its parent dir exists.
.IP "\fIstdout\fR" 4
.IX Item "stdout"
Write all daemon's output to given file. If not specified, all output will be redirected to \f(CW\*(C`/dev/null\*(C'\fR.
.IP "\fIstderr\fR" 4
.IX Item "stderr"
Write all daemon's error output to given file. If not specified, all stderr will be redirected to \f(CW\*(C`/dev/null\*(C'\fR.
.IP "\fIubic_log\fR" 4
.IX Item "ubic_log"
Optional filename of ubic log. It will contain some technical information about running daemon.
.Sp
If not specified, this logging facility will be disabled.
.IP "\fIterm_timeout\fR" 4
.IX Item "term_timeout"
Can contain integer number of seconds to wait between sending \fI\s-1SIGTERM\s0\fR and \fI\s-1SIGKILL\s0\fR to daemon.
.Sp
Zero value means that guardian will send sigkill to daemon immediately.
.Sp
Default is 10 seconds.
.RE
.RS 4
.RE
.IP "\fBcheck_daemon($pidfile)\fR" 4
.IX Item "check_daemon($pidfile)"
Check whether daemon is running.
.Sp
Returns instance of Ubic::Daemon::Status class if daemon is alive, and false otherwise.
.SH "BUGS AND CAVEATS"
.IX Header "BUGS AND CAVEATS"
Probably. But it definitely is ready for production usage.
.PP
This module currently is Linux\-specific, because it uses \f(CW\*(C`/proc\*(C'\fR some magic. Patches are very welcome to fix this.
.PP
If you can't figure out why there are \f(CW\*(C`ubic\-guardian\*(C'\fR processes in your \f(CW\*(C`ps\*(C'\fR output, see Ubic::Manual::FAQ, answer is there.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Ubic::Service::SimpleDaemon \- simplest ubic service which uses Ubic::Daemon
.PP
There are also a plenty of other daemonizers on \s-1CPAN:\s0
.PP
MooseX::Daemonize, Proc::Daemon, Daemon::Generic, Net::ServeR::Daemonize.
.SH "AUTHOR"
.IX Header "AUTHOR"
Vyacheslav Matyukhin <mmcleric@yandex\-team.ru>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by Yandex \s-1LLC\s0.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
