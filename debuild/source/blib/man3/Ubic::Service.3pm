.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Ubic::Service 3"
.TH Ubic::Service 3 "2011-06-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Ubic::Service \- interface and base class for any ubic service
.SH "VERSION"
.IX Header "VERSION"
version 1.29
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    print "Service: ", $service\->name;
\&    $service\->start;
\&    $service\->stop;
\&    $service\->restart;
\&    $status = $service\->status;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Ubic::Service is the abstract base class for all ubic service classes.
.PP
It provides common \s-1API\s0 for implementing service start/stop operations, custom commands and tuning some metadata properties (\f(CW\*(C`user()\*(C'\fR, \f(CW\*(C`group()\*(C'\fR, \f(CW\*(C`check_period()\*(C'\fR).
.SH "METHODS"
.IX Header "METHODS"
.Sh "\s-1ACTION\s0 \s-1METHODS\s0"
.IX Subsection "ACTION METHODS"
All action methods should return Ubic::Result::Class objects. If action method returns plain string, Ubic will wrap it into result object too.
.IP "\fB\f(BIstart()\fB\fR" 4
.IX Item "start()"
Start service. Should throw exception on failure and string with operation result otherwise.
.Sp
Starting already running service should do nothing and return \f(CW\*(C`already running\*(C'\fR.
.IP "\fB\f(BIstop()\fB\fR" 4
.IX Item "stop()"
Stop service. Should throw exception on failure and string with operation result otherwise.
.Sp
Stopping already stopped service should do nothing and return \f(CW\*(C`not running\*(C'\fR.
.Sp
Successful stop of a service \fBmust\fR disable this service.
.IP "\fB\f(BIstatus()\fB\fR" 4
.IX Item "status()"
Check real status of service.
.Sp
It should check that service is running correctly and return \f(CW\*(C`running\*(C'\fR if it is so.
.IP "\fB\f(BIreload()\fB\fR" 4
.IX Item "reload()"
Reload service, if possible.
.Sh "\s-1METADATA\s0 \s-1METHODS\s0"
.IX Subsection "METADATA METHODS"
All metadata methods are read\-only. All of them provide sane defaults.
.IP "\fB\f(BIport()\fB\fR" 4
.IX Item "port()"
Get port number if service provides a server which uses \s-1TCP\s0 protocol.
.Sp
Default is \f(CW\*(C`undef\*(C'\fR.
.IP "\fB\f(BIuser()\fB\fR" 4
.IX Item "user()"
Should return user from which the service can be controlled and will be running.
.Sp
Defaults to \f(CW\*(C`default_user\*(C'\fR from Ubic::Settings (i.e., \f(CW\*(C`root\*(C'\fR for system-wide installations, or to the installation owner for local installations).
.IP "\fB\f(BIgroup()\fB\fR" 4
.IX Item "group()"
Get list of groups from which the service can be controlled and will be running.
.Sp
First group from list will be used as real and effective group id, and other groups will be set as supplementary groups.
.Sp
Default is an empty list, which will later be interpreted as default group of the user returned by \f(CW\*(C`user()\*(C'\fR method.
.IP "\fB\f(BIcheck_period()\fB\fR" 4
.IX Item "check_period()"
Period of checking a service by watchdog in seconds.
.Sp
Default is 60 seconds and it is unused by ubic-watchdog currently, so don't bother to override it by now :)
.IP "\fB\f(BIcheck_timeout()\fB\fR" 4
.IX Item "check_timeout()"
Timeout after which watchdog will give up on checking a service and kill itself.
.Sp
This parameter exists as a precaution against incorrectly implemented \f(CW\*(C`status()\*(C'\fR or \f(CW\*(C`start()\*(C'\fR methods. If \f(CW\*(C`status()\*(C'\fR method hangs, without this timeout, watchdog would stay in memory forever and never get a chance to restart a service.
.Sp
This parameter is *not* a timeout for querying your service by \s-1HTTP\s0 or whatever your status check is. Service-specific timeouts should be configured by other means.
.Sp
Default value is 60 seconds. It should not be changed unless you have a very good reason to do so (i.e., your service is so horribly slow that it can't start in 1 minute).
.Sh "\s-1CUSTOM\s0 \s-1COMMAND\s0 \s-1METHODS\s0"
.IX Subsection "CUSTOM COMMAND METHODS"
Services can define custom commands which don't fit into usual \f(CW\*(C`start/stop/restart/status\*(C'\fR set.
.IP "\fB\f(BIcustom_commands()\fB\fR" 4
.IX Item "custom_commands()"
Can return list of service's custom commands, if such are exist.
.IP "\fBdo_custom_command($command)\fR" 4
.IX Item "do_custom_command($command)"
Should execute specified command, if it is supported.
.Sh "\s-1NAME\s0 \s-1METHODS\s0"
.IX Subsection "NAME METHODS"
These methods usually should not be overriden by service classes. They are usually used by code which loads service (i.e. some Ubic::Multiservice) to associate service with its name.
.IP "\fB\f(BIname()\fB\fR" 4
.IX Item "name()"
.PD 0
.IP "\fBname($new_name)\fR" 4
.IX Item "name($new_name)"
.PD
Name of service.
.Sp
Each service with the same parent should have an unique name.
.Sp
In case of subservices, this method should return the most lower-level name.
.Sp
Service implementation classes shouldn't override this or other \f(CW*_name\fR methods; it's usually a service's loader job to set them correctly.
.IP "\fB\f(BIfull_name()\fB\fR" 4
.IX Item "full_name()"
Fully qualified name of service.
.Sp
Each service must have a unique full_name.
.Sp
Full name is a concatenation of service's short \f(CW\*(C`name\*(C'\fR and service's <parent_name>.
.IP "\fB\f(BIparent_name()\fB\fR" 4
.IX Item "parent_name()"
.PD 0
.IP "\fBparent_name($new_parent_name)\fR" 4
.IX Item "parent_name($new_parent_name)"
.PD
Get/set name of service's parent.
.Sp
Service's loader (i.e. some kind of Ubic::Multiservice) is responsible for calling this method immediately after service's construction as \f(CW\*(C`$service\->parent_name($self\->full_name)\*(C'\fR.
.SH "FUTURE DIRECTIONS"
.IX Header "FUTURE DIRECTIONS"
Current \s-1API\s0 for custom commands is inconvenient and don't support parameterized commands. It needs some refactoring.
.PP
Requiring every service to inherit from this class can be seen as undesirable by some programmers, especially by those who prefer to use Moose and roles.
If you know how to make this \s-1API\s0 more role-friendly without too much of converting pains, please contact us at ubic\-perl@googlegroups.com or at irc://irc.perl.org#ubic.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Ubic::Service::Skeleton \- implement simple start/stop/status methods, and ubic will care about everything else.
.PP
Ubic::Service::Common \- just like Skeleton, but all code can be passed to constructor as sub references.
.PP
Ubic::Service::SimpleDaemon \- give it any binary and it will make service from it.
.SH "AUTHOR"
.IX Header "AUTHOR"
Vyacheslav Matyukhin <mmcleric@yandex\-team.ru>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by Yandex \s-1LLC\s0.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
