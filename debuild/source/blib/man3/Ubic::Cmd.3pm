.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Ubic::Cmd 3"
.TH Ubic::Cmd 3 "2011-06-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Ubic::Cmd \- ubic methods with pretty printing.
.SH "VERSION"
.IX Header "VERSION"
version 1.29
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
When using ubic from simple scripts, you want to print some output about what happened when starting/stopping service.
.PP
This package mostly conforms to \f(CW\*(C`Ubic\*(C'\fR module \s-1API\s0 (i.e. to \s-1LSB\s0 init-script \s-1API\s0).
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Ubic::Cmd;
\&    Ubic::Cmd\->start("aaa.bbb");
.Ve
.SH "CONSTRUCTOR"
.IX Header "CONSTRUCTOR"
.IP "\fBnew($params)\fR" 4
.IX Item "new($params)"
All methods of this class can be invoked as class methods, but you can construct your own instance if neccesary (although constructor doesn't have any options by now, so it is useless).
.SH "LSB METHODS"
.IX Header "LSB METHODS"
All following methods do the same things as methods in \f(CW\*(C`Ubic\*(C'\fR, but they also print messages about their actions.
.IP "\fBstart($service)\fR" 4
.IX Item "start($service)"
.PD 0
.IP "\fBstop($service)\fR" 4
.IX Item "stop($service)"
.IP "\fBrestart($service)\fR" 4
.IX Item "restart($service)"
.IP "\fBtry_restart($service)\fR" 4
.IX Item "try_restart($service)"
.IP "\fBreload($service)\fR" 4
.IX Item "reload($service)"
.IP "\fBforce_reload($name)\fR" 4
.IX Item "force_reload($name)"
.PD
.SH "OTHER METHODS"
.IX Header "OTHER METHODS"
.ie n .IP "\fBdo_custom_command($service, \fB$command\fB)\fR" 4
.el .IP "\fBdo_custom_command($service, \f(CB$command\fB)\fR" 4
.IX Item "do_custom_command($service, $command)"
Do non-LSB command.
.IP "\fBusage($command)\fR" 4
.IX Item "usage($command)"
Print command's usage.
.Sp
\&\s-1WARNING:\s0 exits on invocation!
.ie n .IP "\fBtraverse($name_or_service, \fB$callback\fB)\fR" 4
.el .IP "\fBtraverse($name_or_service, \f(CB$callback\fB)\fR" 4
.IX Item "traverse($name_or_service, $callback)"
Process each subservice of \f(CW$name_or_service\fR with \f(CW$callback\fR, printing correct indentations.
.ie n .IP "\fBprint_status($name, \fB$force_cached\fB)\fR" 4
.el .IP "\fBprint_status($name, \f(CB$force_cached\fB)\fR" 4
.IX Item "print_status($name, $force_cached)"
.PD 0
.ie n .IP "\fBprint_status($name, \fB$force_cached\fB, \f(BI$results\fB)\fR" 4
.el .IP "\fBprint_status($name, \f(CB$force_cached\fB, \f(CB$results\fB)\fR" 4
.IX Item "print_status($name, $force_cached, $results)"
.PD
Print status of given service identified by name or by object.
.Sp
If \f(CW$force_cached\fR is true, prints status cached in watchdog file. Otherwise, check for real status if current user is \fBroot\fR or if current user is equal to service user.
.IP "\fBrun($params_hashref)\fR" 4
.IX Item "run($params_hashref)"
Run given command for given service and exit with LSB-compatible exit code.
.Sp
Parameters:
.RS 4
.IP "\fIname\fR" 4
.IX Item "name"
Service's name or arrayref with names.
.IP "\fIcommand\fR" 4
.IX Item "command"
Command to execute.
.IP "\fIforce\fR" 4
.IX Item "force"
Force command on protected multiservice.
.RE
.RS 4
.RE
.SH "BUGS AND CAVEATS"
.IX Header "BUGS AND CAVEATS"
Interface of this class is unstable and can be changed without further notice.
.PP
When in doubt, consider Ubic or system(\*(L"ubic \s-1COMMAND\s0 \s-1SERVICE\s0\*(R") instead.
.SH "AUTHOR"
.IX Header "AUTHOR"
Vyacheslav Matyukhin <mmcleric@yandex\-team.ru>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by Yandex \s-1LLC\s0.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
