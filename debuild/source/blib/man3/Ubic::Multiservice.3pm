.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Ubic::Multiservice 3"
.TH Ubic::Multiservice 3 "2011-06-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Ubic::Multiservice \- interface of multiservice representing several named services
.SH "VERSION"
.IX Header "VERSION"
version 1.29
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    $service = $multiservice\->service("multiservice\-x.multiservice\-y.service\-z");
\&    @services = $multiservice\->services();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Multiservices are objects with simple list/get \s-1API\s0 which is used to fill ubic service tree.
.PP
This is an abstract base class for all multiservices.
.PP
Actual multiservice classes should inherit from this class and implement methods from \*(L"\s-1ABSTRACT\s0 \s-1METHODS\s0\*(R" section.
.SH "ABSTRACT METHODS"
.IX Header "ABSTRACT METHODS"
These methods have to be overloaded by subclasses:
.IP "\fBsimple_service($name)\fR" 4
.IX Item "simple_service($name)"
Should return subservice by its short name (i.e. name without dot separators in it).
.IP "\fB\f(BIservice_names()\fB\fR" 4
.IX Item "service_names()"
Should return list with the names of all top-level subservices.
.SH "METHODS"
.IX Header "METHODS"
These methods can be overloaded for a performance boost or some non-trivial tasks, but their default implementation should be adequate in 99% of the cases.
.IP "\fBservice($name)\fR" 4
.IX Item "service($name)"
Get service by name.
.Sp
This class provides a common implementation which can delegate searching of subservices to multiservices (don't panic!), so subclasses should implement \f(CW\*(C`simple_service\*(C'\fR instead.
.Sp
All subservices are cached forever.
.IP "\fBhas_service($name)\fR" 4
.IX Item "has_service($name)"
Check whether service with specified name exists in this multiservice.
.Sp
Like \f(CW\*(C`service\*(C'\fR, subclasses should usually implement \f(CW\*(C`has_simple_service\*(C'\fR instead.
.IP "\fB\f(BIservices()\fB\fR" 4
.IX Item "services()"
Construct all top-level subservices.
.Sp
By default, it uses \f(CW\*(C`service_names\*(C'\fR to get the list of names.
.IP "\fBhas_simple_service($name)\fR" 4
.IX Item "has_simple_service($name)"
Returns true if \f(CW$name\fR is a subservice of this multiservice.
.Sp
Default implementation calls \f(CW\*(C`$self\->service_names\*(C'\fR, so you might want to reimplement it in subclasses for a performance reasons.
.IP "\fB\f(BImultiop()\fB\fR" 4
.IX Item "multiop()"
Get multiop operation mode of a multiservice. There are three possible values which this method can return:
.RS 4
.IP "\fIallowed\fR" 4
.IX Item "allowed"
\&\f(CW\*(C`start\*(C'\fR, \f(CW\*(C`stop\*(C'\fR, \f(CW\*(C`restart\*(C'\fR actions for this module start/stop/restart all subservices.
.IP "\fIprotected\fR" 4
.IX Item "protected"
\&\fI\-f\fR flag in \fIubic\fR\|(1) binary is required to call any action. This is a default.
.IP "\fIforbidden\fR" 4
.IX Item "forbidden"
\&\fIubic\fR\|(1) binary will refuse to start/stop/restart this multiservice.
.RE
.RS 4
.RE
.SH "BUGS AND CAVEATS"
.IX Header "BUGS AND CAVEATS"
Although multiservice class is inherited from \f(CW\*(C`Ubic::Service\*(C'\fR class, it doesn't and shouldn't implement start/stop/status methods. This is because user will usually want to see action's progress, and all output policy is defined in Ubic::Cmd class; interaction protocol between this class and \f(CW\*(C`Ubic::Cmd\*(C'\fR class would be too complex.
.PP
This may be fixed in future: either \f(CW\*(C`Ubic::Multiservice\*(C'\fR will no longer inherit from \f(CW\*(C`Ubic::Service\*(C'\fR, or start/stop methods will be implemented with renderer object as an argument. Until then, please don't override these methods in subclasses.
.PP
\&\f(CW\*(C`user\*(C'\fR, \f(CW\*(C`group\*(C'\fR and other metadata methods are not used for multiservices too.
.PP
Subservices are cached forever; this can cause troubles, but it is necessary to avoid memory leaks in persistent programs, for example, in \f(CW\*(C`Ubic::Ping\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Ubic::Multiservice::Simple \- class for defining simple multiservices.
.PP
Ubic::Multiservice::Dir \- multiservice which loads service configs from files.
.SH "AUTHOR"
.IX Header "AUTHOR"
Vyacheslav Matyukhin <mmcleric@yandex\-team.ru>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by Yandex \s-1LLC\s0.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
