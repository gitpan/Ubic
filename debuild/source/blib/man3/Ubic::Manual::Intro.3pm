.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Ubic::Manual::Intro 3"
.TH Ubic::Manual::Intro 3 "2011-06-07" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Ubic::Manual::Intro \- General ubic concepts and architecture
.SH "VERSION"
.IX Header "VERSION"
version 1.29
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Ubic is a perl-based service manager.
.PP
Ubic can run any program as a service and provides frontend script \f(CW\*(C`ubic\*(C'\fR to manage services.
.PP
Ubic includes centralized watchdog process which checks every service periodically and brings them back online if necessary.
.SH "GLOSSARY"
.IX Header "GLOSSARY"
.IP "\fIService\fR" 4
.IX Item "Service"
Ubic service is an object describing how your service works.
.Sp
Service object must conform to the \s-1API\s0 of the Ubic::Service class, so it must implement \f(CW\*(C`start\*(C'\fR, \f(CW\*(C`stop\*(C'\fR and \f(CW\*(C`status\*(C'\fR methods.
.Sp
It can also provide other methods: which user should be used to run the service, how often the service should be checked by the watchdog, etc.
.IP "\fIService class\fR" 4
.IX Item "Service class"
Most services don't implement start/stop methods themselves. Instead, they are declared as instances of some existing service class, for example, Ubic::Service::SimpleDaemon.
.IP "\fIService dir\fR" 4
.IX Item "Service dir"
Service declarations are stored in ubic \fIservice dir\fR.
.Sp
Service delaration is a single file with perl code which returns service object when executed with \f(CW\*(C`do\*(C'\fR.
.Sp
If you're using host-level installation, service dir is \fI/etc/ubic/service\fR. If you're using installation to home dir, service dir is \fI~/ubic/service\fR.
.IP "\fIMultiservice and service tree\fR" 4
.IX Item "Multiservice and service tree"
Service dir can contain another type of object: \fImultiservices\fR.
.Sp
Multiservice is an object implementing Ubic::Multiservice \s-1API\s0.
.Sp
Multiservices allow to generate a list of services dynamically and fill it by other means than by writing perl code for each service.
.Sp
All services collected by evaluation of service delaration and traversing multiservices, make up the \fIservice tree\fR.
.IP "\fIStatus\fR" 4
.IX Item "Status"
Every service implements \f(CW\*(C`status()\*(C'\fR method. You can see it by invoking \f(CW\*(C`ubic status\*(C'\fR command from terminal.
.IP "\fIWatchdog\fR" 4
.IX Item "Watchdog"
Default installation provides some services out of the box. The most important of them is \fIubic.watchdog\fR.
.Sp
Watchdog service checks every service status periodically and restarts them if they broke.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
Installing \f(CW\*(C`Ubic\*(C'\fR is easy.
.PP
First, install the module using your favorite \s-1CPAN\s0 client, for example, \f(CW\*(C`cpanm Ubic\*(C'\fR.
.PP
Second, invoke ubic-admin script to perform initial configuration: \f(CW\*(C`ubic\-admin setup\*(C'\fR.
.PP
If you don't like that setup process asks too many questions, you can invoke it as \f(CW\*(C`ubic\-admin setup \-\-batch\-mode \-\-quiet\*(C'\fR.
.PP
Alternatively, if you're using Debian or Ubuntu, you can install ubic .deb package from official launchpad \s-1PPA\s0 repository: https://launchpad.net/~berekuk/+archive/ubic.
.SH "WRITE YOUR FIRST SERVICE"
.IX Header "WRITE YOUR FIRST SERVICE"
Put this code in your service dir, i.e. in file \fI/etc/ubic/service/example\fR (or if you're using home-dir installation, in \fI~/ubic/service/example\fR):
.PP
.Vb 4
\&    use Ubic::Service::SimpleDaemon;
\&    Ubic::Service::SimpleDaemon\->new(
\&        bin => \(aqsleep 1000\(aq,
\&    );
.Ve
.PP
Start it:
.PP
.Vb 2
\&    $ ubic start example
\&    Starting example... started (pid 41209)
.Ve
.PP
Check its status:
.PP
.Vb 6
\&    $ ubic status
\&    example running (pid 41209)
\&    ubic
\&        ubic.ping   off
\&        ubic.update off
\&        ubic.watchdog   running (pid 93226)
.Ve
.PP
Or:
.PP
.Vb 2
\&    $ ubic status example
\&    example running (pid 41209)
.Ve
.PP
Now let's see how watchdog works by killing the process (don't forget to change pid with the pid you got in status command above):
.PP
.Vb 1
\&    $ kill 41209
.Ve
.PP
.Vb 2
\&    $ ubic status example
\&    example not running
.Ve
.PP
.Vb 2
\&    $ ubic\-watchdog
\&    [Thu May 26 20:20:54 2011]  example is broken, restarting
.Ve
.PP
You don't have to run ubic-watchdog manually; it will do its work in background in a minute.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Ubic::Service::SimpleDaemon allows you to tune other service aspects other than \fIbin\fR. Check it out.
.PP
Series of blog posts written as tutorials
.SH "AUTHOR"
.IX Header "AUTHOR"
Vyacheslav Matyukhin <mmcleric@yandex\-team.ru>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by Yandex \s-1LLC\s0.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
